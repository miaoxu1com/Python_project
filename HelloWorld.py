# import keyword
# print(keyword.kwlist)
#变量的定义 变量在使用前必须 “定义”(赋值)，否则会出错:
#等号( '=' )用于给变量赋值。赋值之后，在下一个提示符之前不会有任何结果显示:
# cars = 100
# space_in_a_car = 4.0
# drivers = 30
# passengers = 30
# cars_not_driven = cars - drivers
# cars_driven = drivers
# carpool_capacity = cars_driven*space_in_a_car
# average_passeners_per_car = passengers / cars_driven
#字符串打印
# print ("there are",cars,"cars avaiable")
# print ("there are only",drivers,"drivers available")
# print ("there will be ",cars_not_driven,"empty cars today")
# print ("we can transport",carpool_capacity,"pople today")
# print ("we have",passengers,"to carpool today")
# print ("we need to put about",average_passeners_per_car,"in each car")
#字符串格式化
# print("I am is %s" %cars);
# sex = input("how old 0");
# jimi = 5;
# print("nihaoa",jimi,"来了啊");
# ** 求幂 //取除数的整数  /永远反汇浮点数类型
# n1 = 7/2;
# n2 = 6**2;
# print(n1,n2);
#浮点数有完整的支持；整数和浮点数的混合计算中，整数会被转换为浮点数:
# print(3*1.5/2);
# n3 = 5;
#交互模式中，最近一个表达式的值赋给变量 _。这样我们就可以把它当作一个桌面计算器，很方便的用于连续计算，例如:
# print(4+_);
#除了 int 和 float，Python 还支持其它数字类型，例如 Decimal 和 Fraction。Python 还内建支持 复数 ，使用后缀 j 或 J
# 表示虚数部分（例如，3+5j）。
#字符串文本能够分成多行。一种方法是使用三引号："""...""" 或者 '''...'''。行尾换行符会被自动包含到字符串中，但是可以
#在行尾加上 \ 来避免这个行为。下面的示例： 可以使用反斜杠为行结尾的连续字符串，它表示下一行在逻辑上是本行的后续内容:
# print("""\
# nihaoa
# laiba
# wozaijia
# """);
#字符串可以由 + 操作符连接(粘到一起)，可以由 * 表示重复


#如果你想连接多个变量或者连接一个变量和一个字符串文本，使用 +:
# s1 = "aa";
# s2 = "vvbb";
# print(s1+s2);
#相邻的两个字符串文本自动连接在一起。:
#这个功能在你想切分很长的字符串的时候特别有用:
# print('abcdef''ffafsdfsdf');
#它只用于两个字符串文本，不能用于字符串表达式:
#print("8"*3"tyy");

# 字符串也可以被截取(检索)。类似于 C ，字符串的第一个字符索引为 0 。Python没有单独的字符类型；一个字符就是一个简单
# 的长度为1的字符串。
s3 = 'abcd';
# print(s3[0],s3[1],s3[2]);
#索引也可以是负数，这将导致从右边开始计算。例如:
# print(s3[-1]);
#除了索引，还支持 切片。索引用于获得单个字符，切片 让你获得一个子字符串:
# print(s3[1:2]);
#注意，包含起始的字符，不包含末尾的字符。这使得 s[:i] + s[i:] 永远等于 s:
# print(s3[:2]+s3[2:]);
#切片的索引有非常有用的默认值；省略的第一个索引默认为零，省略的第二个索引默认为切片的字符串的大小。:
#有个办法可以很容易地记住切片的工作方式：切片时的索引是在两个字符 之间 。左边第一个字符的索引为 0，而长度为 n 的字符串其最后一个字符的右界索引为 n。例如:

#  +---+---+---+---+---+---+
#  | P | y | t | h | o | n |
#  +---+---+---+---+---+---+
#  0   1   2   3   4   5   6
# -6  -5  -4  -3  -2  -1
# 文本中的第一行数字给出字符串中的索引点 0…6。第二行给出相应的负索引。切片是从 i 到 j 两个数值标示的边界之间的所有字符。
#
# 对于非负索引，如果上下都在边界内，切片长度就是两个索引之差。例如，word[1:3] 是 2 。
#
# 试图使用太大的索引会导致错误:
# word[42]  # the word only has 6 characters
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# IndexError: string index out of range
# Python 能够优雅地处理那些没有意义的切片索引：一个过大的索引值(即下标值大于字符串实际长度)将被字符串实际长度所代替，
# 当上边界比下边界大时(即切片左值大于右值)就返回空字符串:
# Python字符串不可以被更改 — 它们是 不可变的 。因此，赋值给字符串索引的位置会导致错误:
# word[0] = 'J'
# TypeError: 'str' object does not support item assignment
# >>> 'J' + word[1:]
# 'Jython'
# >>> word[:2] + 'py'
# 'Pypy'
#内置函数 len() 返回字符串长度:
# s = 'supercalifragilisticexpialidocious'
# print(len(s));
# 3.1.3. 列表
# Python 有几个 复合 数据类型，用于表示其它的值。最通用的是 list (列表) ，它可以写作中括号之间的一列逗号分隔的值。列表的元素不必是同一类型:
# f=[1,2,3,'adv','kkl','张三'];
# print(f);
#就像字符串(以及其它所有内建的 序列 类型)一样，列表可以被索引和切片:
# print(f[0],f[-1],f[-3:]);
#所有的切片操作都会返回一个包含请求的元素的新列表。这意味着下面的切片操作返回列表一个新的（浅）拷贝副本:
#列表也支持连接这样的操作:
# f1=f + [36, 49, 64, 81, 100];
# print(f1);
#不像 不可变的 字符串，列表是 可变的，它允许修改元素:
# f1[1] = '李四';
# print(f1);
#你还可以使用 append() 方法 （后面我们会看到更多关于列表的方法的内容）在列表的末尾添加新的元素:
# f1.append('最后一个');
# print(f1);
#也可以对切片赋值，此操作可以改变列表的尺寸，或清空它:
# f1[2:5]=[4,5];
# print(f1);
# f1[2:5] = [];
# print(f1);
# f1[:] = [];
# print(f1);
# print(type(f1));
#内置函数 len() 同样适用于列表:
# print(len(f1));
#允许嵌套列表(创建一个包含其它列表的列表)，例如:
# a=[1,23,4];
# b=['1','3','4'];
# x=[a,b];
# print(x);
# print(x[0][1]);
# 3.2. 编程的第一步
# 当然，我们可以使用 Python 完成比二加二更复杂的任务。例如，我们可以写一个生成 菲波那契 子序列的程序，如下所示:
# 这个例子介绍了几个新功能。
#
#     第一行包括了一个 多重赋值：变量 a 和 b 同时获得了新的值 0 和 1 最后一行又使用了一次。
#
#     在这个演示中，变量赋值前，右边首先完成计算。右边的表达式从左到右计算。
#
#     条件（这里是 b < 10 ）为 true 时， while 循环执行。在 Python 中，类似于 C，任何非零整数都是 true；0 是 false。条件也可以是字符串或列表，实际上可以是任何序列；
#
#     所有长度不为零的是 true，空序列是 false。示例中的测试是一个简单的比较。标准比较操作符与 C 相同： < ， > ， == ， <=， >= 和 !=。
#
#     循环 体 是 缩进 的：缩进是 Python 组织语句的方法。Python (还)不提供集成的行编辑功能，所以你要为每一个缩进行输入 TAB 或空格。
#
#     实践中建议你找个文本编辑来录入复杂的 Python 程序，大多数文本编辑器提供自动缩进。交互式录入复合语句时，必须在最后输入一个空行来标识结束（因为解释器没办法猜测你输入的哪一行是最后一行），需要 注意的是同一个语句块中的每一行必须缩进同样数量的空白。
#
#     关键字 print() 语句输出给定表达式的值。它控制多个表达式和字符串输出为你想要字符串（就像我们在前面计算器的例子中那样）。
#
#     字符串打印时不用引号包围，每两个子项之间插入空间，所以你可以把格式弄得很漂亮，像这样:
# a,b=0,1;
# while b<1000:
#     print(b);
#     a,b=b,a+b;
# [1]	因为 ** 的优先级高于 -，所以 -3**2 将解释为 -(3**2) 且结果为 -9。为了避免这点并得到 9，你可以使用 (-3)**2。
# [2]	与其它语言不同，特殊字符例如 \n 在单引号('...')和双引号("...")中具有相同的含义。两者唯一的区别是在单引号中，你不需要转义 " （但你必须转义 \' )，反之亦然。
# a=int(input("请输入:"));
# a,b=eval(input("请输入:"));
# print(type(a));

# 在第 1 行我们有一个“import”语句. 这是你将 python 的功能引入你的脚本的
# 方法. Python 不会一下子将它所有的功能给你，而是让你需要什么就调用什么。
# 这样可以让你的程序保持精简，而后面的程序员看到你的代码的时候，这些
# “import”可以作为提示，让他们明白你的代码用到了哪些功能

